# Preview deployment workflow
# Cancels previous deployments when new commits are pushed to PR

name: Deploy Preview

on:
  pull_request_target:
    branches:
      - master
    types: [opened, synchronize, reopened]

# Cancel outdated deployments per PR
concurrency:
  group: deploy-preview-${{ github.event.number }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.24.1'
  FLUTTER_WEB_RENDERER: 'html'
  NODE_VERSION: '20.x'

permissions:
  contents: read
  pull-requests: write

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Generate branch slug
        id: branch-slug
        run: |
          BRANCH_SLUG=$(echo "${{ github.event.pull_request.head.ref }}" | sed 's|/|-|g' | sed 's|[^a-zA-Z0-9_-]||g' | tr '[:upper:]' '[:lower:]')
          # Ensure branch slug is not empty and has max length for Cloudflare
          if [ -z "$BRANCH_SLUG" ]; then
            BRANCH_SLUG="pr-${{ github.event.number }}"
          fi
          BRANCH_SLUG=$(echo "$BRANCH_SLUG" | cut -c1-63)
          echo "branch_slug=$BRANCH_SLUG" >> $GITHUB_OUTPUT
          echo "Generated branch slug: $BRANCH_SLUG"

      - name: Comment PR with deployment URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request_target' && steps.deploy.outputs.deployment_url
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.deployment_url }}';
            const allUrls = '${{ steps.deploy.outputs.all_urls }}';
            const commitHash = '${{ github.event.pull_request.head.sha }}';
            const shortCommit = commitHash.substring(0, 8);

            if (!deploymentUrl) {
              console.log('❌ No deployment URL available to comment.');
              return;
            }

            console.log('🔍 Primary URL:', deploymentUrl);
            console.log('🔍 All URLs:', allUrls);

            // Parse the URLs returned by Cloudflare
            const urlArray = allUrls.split(',').map(url => url.trim()).filter(url => url);
            
            let primaryUrl = deploymentUrl;
            let alternateUrl = '';
            
            // Find alternate URL (the one that's not the primary)
            if (urlArray.length > 1) {
              alternateUrl = urlArray.find(url => url !== deploymentUrl) || '';
            }

            // Determine which domain is primary for display purposes
            const isDeriv = primaryUrl.includes('.deriv.cloud');
            const domainType = isDeriv ? 'deriv.cloud' : 'pages.dev';
            
            console.log('🔍 Primary domain type:', domainType);
            console.log('🔍 Alternate URL:', alternateUrl);

            // Build the comment body
            let commentBody = `
            🚀 **Deploy Preview Ready!**

            | Property | Value |
            | ------- | ----- |
            | Commit | \`${shortCommit}\` |
            | Status | ✅ Deploy successful |
            | Primary URL | [${primaryUrl}](${primaryUrl}) |`;

            // Only add alternate URL if it exists
            if (alternateUrl) {
              commentBody += `\n            | Alternate URL | [${alternateUrl}](${alternateUrl}) |`;
            }

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number
            });

            const existingComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              (comment.body.includes('🚀 **Deploy Preview Ready!**') ||
              comment.body.includes('Primary URL') ||
              comment.body.includes('deployment'))
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
              console.log('🔁 Updated existing deployment comment.');
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: commentBody
              });
              console.log('✅ Created new deployment comment.');
            }