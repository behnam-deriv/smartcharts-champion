# Preview deployment workflow
# Cancels previous deployments when new commits are pushed to PR

name: Deploy Preview

on:
  pull_request_target:
    branches:
      - master
    types: [opened, synchronize, reopened]

# Cancel outdated deployments per PR
concurrency:
  group: deploy-preview-${{ github.event.number }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.24.1'
  FLUTTER_WEB_RENDERER: 'html'
  NODE_VERSION: '20.x'

permissions:
  contents: read
  pull-requests: write

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Generate branch slug
        id: branch-slug
        run: |
          BRANCH_SLUG=$(echo "${{ github.event.pull_request.head.ref }}" | sed 's|/|-|g' | sed 's|[^a-zA-Z0-9_-]||g' | tr '[:upper:]' '[:lower:]')
          # Ensure branch slug is not empty and has max length for Cloudflare
          if [ -z "$BRANCH_SLUG" ]; then
            BRANCH_SLUG="pr-${{ github.event.number }}"
          fi
          BRANCH_SLUG=$(echo "$BRANCH_SLUG" | cut -c1-63)
          echo "branch_slug=$BRANCH_SLUG" >> $GITHUB_OUTPUT
          echo "Generated branch slug: $BRANCH_SLUG"

      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: "./.github/actions/build-and-deploy"
        with:
          cloudflare_api_token: ${{ secrets.CLOUDFLARE_TEST_LINKS_API_TOKEN }}
          cloudflare_account_id: ${{ secrets.CLOUDFLARE_TEST_LINKS_ACCOUNT_ID }}
          project_name: 'smartcharts-champion'
          branch_name: ${{ steps.branch-slug.outputs.branch_slug }}
          node_version: ${{ env.NODE_VERSION }}
          flutter_version: ${{ env.FLUTTER_VERSION }}
          flutter_web_renderer: ${{ env.FLUTTER_WEB_RENDERER }}
          environment: 'preview'
          commit_hash: ${{ github.event.pull_request.head.sha }}

      - name: Comment PR with deployment URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request_target' && steps.deploy.outputs.deployment_url
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.deployment_url }}';
            
            if (!deploymentUrl || deploymentUrl === '') {
              console.log('No deployment URL available to comment');
              return;
            }
            
            const comment = `ðŸš€ **Preview Deployment**
            
            Your changes have been deployed to: ${deploymentUrl}
            
            This preview will be updated automatically when you push new commits to this PR.`;
            
            // Check if we already commented on this PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number
            });
            
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('ðŸš€ **Preview Deployment**')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
              console.log('Updated existing deployment comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: comment
              });
              console.log('Created new deployment comment');
            }
